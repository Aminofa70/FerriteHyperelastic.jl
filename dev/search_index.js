var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Functions for the package are listed as follows.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/#FerriteHyperelastic.InputStruct","page":"Functions","title":"FerriteHyperelastic.InputStruct","text":" input = InputStruct()\n\nCreate a dynamic structure for FEM parameters\n\n\n\n\n\n","category":"type"},{"location":"functions/#FerriteHyperelastic.assemble_cell_3D!-Tuple{Any, Vector, Any, Any, InputStruct, Any}","page":"Functions","title":"FerriteHyperelastic.assemble_cell_3D!","text":"    assemble_cell_3D!( ke_n, fe_int::Vector, cell, cv, input::InputStruct, ue)\n\nThis function assembles local internal force and tangent stiffness for 3D\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.assemble_cell_plane_strain!-Tuple{Any, Vector, Any, Any, InputStruct, Any}","page":"Functions","title":"FerriteHyperelastic.assemble_cell_plane_strain!","text":"   assemble_cell_plane_strain!( ke_n, fe_int, cell, cv, input, ue)\n\nThis function assembles local internal force and tangent stiffness for plane strain\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.assemble_cell_plane_stress!-Tuple{Any, Vector, Any, Any, InputStruct, Any}","page":"Functions","title":"FerriteHyperelastic.assemble_cell_plane_stress!","text":"   assemble_cell_plane_stress!(ke_n, fe_int, cell, cv, input, ue)\n\nThis function assembles local internal force and tangent stiffness for plane stress\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.assemble_global_3D!-Tuple{Any, Any, Any, Any, InputStruct, Any}","page":"Functions","title":"FerriteHyperelastic.assemble_global_3D!","text":"  assemble_global_3D!(K_nonlinear, F_int, dh, cv, input, u)\n\nThis function assembles global internal force and tangent stiffness for 3D\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.assemble_global_plane_strain!-Tuple{Any, Any, Any, Any, InputStruct, Any}","page":"Functions","title":"FerriteHyperelastic.assemble_global_plane_strain!","text":"   assemble_global_plane_strain!(K_nonlinear, F_int, dh, cv, input, u)\n\nThis function assembles global internal force and tangent stiffness for plane strain\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.assemble_global_plane_stress!-Tuple{Any, Any, Any, Any, InputStruct, Any}","page":"Functions","title":"FerriteHyperelastic.assemble_global_plane_stress!","text":"   assemble_global_plane_stress!(K_nonlinear, F_int, dh, cv, input, u)\n\nThis function assembles global internal force and tangent stiffness for plane stress\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.assemble_traction_forces_threeD!-Tuple{Any, Ferrite.DofHandler{3, G} where G<:Ferrite.AbstractGrid{3}, Vector, Ferrite.FacetValues, Dict{Int64, <:AbstractVector}, AbstractVector}","page":"Functions","title":"FerriteHyperelastic.assemble_traction_forces_threeD!","text":"assemble_traction_forces_threeD!(F_ext, dh::DofHandler{3},facetsets::Vector, \nfacetvalues::FacetValues, tractions::Dict{Int, <:AbstractVector}, u::AbstractVector)\n\nThis function assembles the external force from traction for 3D\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.assemble_traction_forces_twoD!-Tuple{Any, Any, Vector, Any, Dict{Int64, <:AbstractVector}, AbstractVector}","page":"Functions","title":"FerriteHyperelastic.assemble_traction_forces_twoD!","text":"assemble_traction_forces_twoD!(F_ext, dh,  facetsets::Vector,  facetvalues,  \ntractions::Dict{Int, <:AbstractVector}, u::AbstractVector)\n\nThis function assembles the external force from traction for 2D plane stress and plane strain\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.canonical_quad-Tuple{NTuple{4, Int64}}","page":"Functions","title":"FerriteHyperelastic.canonical_quad","text":"   canonical_quad(t)\n\nCanonicalize a quad (4 node indices) so that rotations/reversals map to the same key. This ensures internal faces (shared by 2 cells) are counted correctly.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.canonical_tri-Tuple{Tuple{Int64, Int64, Int64}}","page":"Functions","title":"FerriteHyperelastic.canonical_tri","text":"canonical_tri(t)\n\nCanonical form for a triangle (handles rotations + reversal = 6 cases)\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.get_boundary_faces-Tuple{Any, Type{Ferrite.Hexahedron}}","page":"Functions","title":"FerriteHyperelastic.get_boundary_faces","text":"get_boundary_faces(grid , Ferrite.Hexahedron)\n\nFunction to get faces at the boundary for Ferrite.Hexahedron \n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.get_boundary_faces-Tuple{Any, Type{Ferrite.Tetrahedron}}","page":"Functions","title":"FerriteHyperelastic.get_boundary_faces","text":"get_boundary_faces_tet(grid,  Ferrite.Tetrahedron)\n\nFunction to get faces at the boundary for Ferrite.Tetrahedron\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.get_faces-Tuple{Ferrite.Hexahedron}","page":"Functions","title":"FerriteHyperelastic.get_faces","text":" get_faces(cell)\n\nfunction to extract all quadrilateral faces from hexahedral cells\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.initialize_solver","page":"Functions","title":"FerriteHyperelastic.initialize_solver","text":"initialize_solver([maxIterPerInc=500], [totalTime=1.0], [initInc=0.1],\n                  [minInc=1e-5], [maxInc=0.2], [totalInc=500])\n\nInitialize solver parameters for a time integration procedure.\n\n\n\n\n\n","category":"function"},{"location":"functions/#FerriteHyperelastic.run_fem-Tuple{InputStruct}","page":"Functions","title":"FerriteHyperelastic.run_fem","text":"run_fem(input)\n\nthe general fem runner for all cases 2D & 3D \n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.run_plane_strain-Tuple{InputStruct}","page":"Functions","title":"FerriteHyperelastic.run_plane_strain","text":"run_plane_strain(input)\n\nrun finite element for 2D plane strain\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.run_plane_strain_disp-Tuple{InputStruct}","page":"Functions","title":"FerriteHyperelastic.run_plane_strain_disp","text":" run_plane_strain_disp(input)\n\nrun finite element for plane stain with displacement load\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.run_plane_stress-Tuple{InputStruct}","page":"Functions","title":"FerriteHyperelastic.run_plane_stress","text":"run_plane_stress(input)\n\nrun finite element for plane stress\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.run_plane_stress_disp-Tuple{InputStruct}","page":"Functions","title":"FerriteHyperelastic.run_plane_stress_disp","text":"run_plane_stress_disp(input)\n\nrun finite element for plane stress with displacement load \n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.run_threeD-Tuple{InputStruct}","page":"Functions","title":"FerriteHyperelastic.run_threeD","text":"run_threeD(input)\n\nrun finite element for 3D \n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.run_threeD_disp-Tuple{InputStruct}","page":"Functions","title":"FerriteHyperelastic.run_threeD_disp","text":"run_threeD_disp(input)\n\nrun finite element code for 3D with displacement load\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.solve_lambda3-Tuple{Any, InputStruct}","page":"Functions","title":"FerriteHyperelastic.solve_lambda3","text":"solve_lambda3(F2d, input; tol=1e-10, maxit=25)\n\nThis functions finds F33 in plane stress \n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.tet_faces_as_tuples-Tuple{Ferrite.Tetrahedron}","page":"Functions","title":"FerriteHyperelastic.tet_faces_as_tuples","text":"tetfacesas_tuples(cell)\n\nfunction to get faces for the tet4 element \n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.to_boundary-Union{Tuple{T}, Tuple{Any, Any, Type{Faces}, Type{T}}} where T<:Union{Ferrite.Hexahedron, Ferrite.Tetrahedron}","page":"Functions","title":"FerriteHyperelastic.to_boundary","text":"to_boundary(grid, facets, Faces,Ferrite.Hexahedron)\nor\nto_boundary(grid, facets, Faces, Ferrite.Tetrahedron)\n\nConvert boundary facets from a Ferrite grid to 3D point coordinates for plotting.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.to_boundary-Union{Tuple{T}, Tuple{Any, Any, Type{Faces}, Type{T}}} where T<:Union{Ferrite.Quadrilateral, Ferrite.Triangle}","page":"Functions","title":"FerriteHyperelastic.to_boundary","text":"  to_boundary(grid, facets, Faces,Ferrite.Quadrilateral)\n\nor        to_boundary(grid, facets, Faces,Ferrite.Triangle)\n\nConvert boundary facets from a Ferrite grid to 2D point coordinates for plotting.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.to_boundary-Union{Tuple{T}, Tuple{Any, Any, Type{Nodes}, Type{T}}} where T<:Union{Ferrite.Hexahedron, Ferrite.Tetrahedron}","page":"Functions","title":"FerriteHyperelastic.to_boundary","text":"to_boundary(grid, nodeset, Nodes, Ferrite.Hexahedron) \nor \nto_boundary(grid, nodeset, Nodes, Ferrite.Tetrahedron)\n\nConvert a set of node indices from a Ferrite grid to 3D point coordinates for plotting.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.to_boundary-Union{Tuple{T}, Tuple{Any, Any, Type{Nodes}, Type{T}}} where T<:Union{Ferrite.Quadrilateral, Ferrite.Triangle}","page":"Functions","title":"FerriteHyperelastic.to_boundary","text":"to_boundary(grid, nodeset, Nodes, Ferrite.Quadrilateral )\n\nor\n\nto_boundary(grid, nodeset, Nodes, Ferrite.Triangle )\n\nConvert a set of node indices from a Ferrite grid to 2D point coordinates for plotting.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.to_geometry-Tuple{Any, Type{Ferrite.Hexahedron}}","page":"Functions","title":"FerriteHyperelastic.to_geometry","text":" to_geometry(grid, Ferrite.Hexahedron)\n\nConvert a Ferrite Hexahedron grid to GeometryBasics-compatible vertices and faces for plotting.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.to_geometry-Tuple{Any, Type{Ferrite.Quadrilateral}}","page":"Functions","title":"FerriteHyperelastic.to_geometry","text":"to_geometry(grid,Ferrite.Quadrilateral)\n\nConvert a Ferrite Quadrilateral grid to GeometryBasics-compatible vertices and faces for plotting.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.to_geometry-Tuple{Any, Type{Ferrite.Tetrahedron}}","page":"Functions","title":"FerriteHyperelastic.to_geometry","text":"to_geometry(grid, Ferrite.Tetrahedron)\n\nConvert a Ferrite Hexahedron grid to GeometryBasics-compatible vertices and faces for plotting.\n\n\n\n\n\n","category":"method"},{"location":"functions/#FerriteHyperelastic.to_geometry-Tuple{Any, Type{Ferrite.Triangle}}","page":"Functions","title":"FerriteHyperelastic.to_geometry","text":"to_geometry(grid, Ferrite.Triangle)\n\nConvert a Ferrite triangular grid to GeometryBasics-compatible vertices and faces for plotting.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/tutorial_fem/#This-is-the-tutorial-to-use-the-package","page":"tutorial fem","title":"This is the tutorial to use the package","text":"","category":"section"},{"location":"tutorials/tutorial_fem/#Guid-to-use-Finite-Element-(fem)","page":"tutorial fem","title":"Guid to use Finite Element (fem)","text":"","category":"section"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"First we need to activate a dynamic structure to have all finite element parameters in it. We do it using ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"input = InputStruct()","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Here input is the a structure that will contains all fem parameters. ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Now using Ferrite.jl we define geometry, mesh, fem parameters for interpolation and numerical integration and define degree-of-freedom. More details for this parts can be found in Ferrite.jl. ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"As an example, we do it for a two dimensional problem. Our element here is quad4 and then we define mesh and geometry as","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"\"\"\"\nLx : Lenght in x-direction\nLy : Lenght in y-direction\nFerrite.Quadrilateral: Define the type of elements.\nnx : Number of element in x-dir \nny : Number of element in y-dir\n\"\"\"\nfunction create_grid(Lx, Ly, nx, ny)\n    corners = [\n        Ferrite.Vec{2}((0.0, 0.0)), Ferrite.Vec{2}((Lx, 0.0)),\n        Ferrite.Vec{2}((Lx, Ly)), Ferrite.Vec{2}((0.0, Ly))\n    ]\n    grid = Ferrite.generate_grid(Ferrite.Quadrilateral, (nx, ny), corners)\n    addnodeset!(grid, \"support_1\", x -> x[1] ≈ 0.0)\n    addfacetset!(grid, \"pressure\", x -> x[1] ≈ Lx)\n    return grid\nend\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"It is noted that ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"addnodeset!(grid, \"support_1\", x -> x[1] ≈ 0.0)\naddfacetset!(grid, \"pressure\", x -> x[1] ≈ Lx)\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"are used to define our boundary conditions.","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"If you want to chose other element types like tri3 and so on please refer to generate_grid .","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Next step is defining the fem values (interpolation and numerical integration)","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"function create_values()\n    dim, order = 2, 1\n    ip = Ferrite.Lagrange{Ferrite.RefQuadrilateral,order}()^dim\n    qr = Ferrite.QuadratureRule{Ferrite.RefQuadrilateral}(2)\n    qr_face = Ferrite.FacetQuadratureRule{Ferrite.RefQuadrilateral}(2)\n    return Ferrite.CellValues(qr, ip), Ferrite.FacetValues(qr_face, ip)\nend","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Very important to know is that the type here should be the same as the element type. For example here we have Ferrite.Quadrilateral and Ferrite.RefQuadrilateral .","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Then defining the dof (here is 2D, ux,uy)","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"function create_dofhandler(grid)\n    dh = Ferrite.DofHandler(grid)\n    Ferrite.add!(dh, :u, Ferrite.Lagrange{Ferrite.RefQuadrilateral,1}()^2)\n    Ferrite.close!(dh)\n    return dh\nend\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Now, we define the Dirichlet boundary condition ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"function create_bc(dh)\n    ch = Ferrite.ConstraintHandler(dh)\n    Ferrite.add!(ch, Ferrite.Dirichlet(:u, Ferrite.getnodeset(dh.grid, \"support_1\"), (x, t) -> [0.0, 0.0], [1, 2]))\n    Ferrite.close!(ch)\n    return ch\nend\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"If we want to plot force-displacement curve, we need to define another boundary condition to get dof of the displacment for the plot. Displacement where the force is applied. ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"function create_bc_force(dh)\n    dbc = Ferrite.ConstraintHandler(dh)\n    Ferrite.add!(dbc, Ferrite.Dirichlet(:u, getfacetset(grid, \"pressure\"), (x, t) -> 0*x))\n    Ferrite.close!(dbc)\n    return dbc\nend\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"To now we defined the required functions for fem. These parts are from the package Ferrite.jl. More details can be seen in this package. ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"The hyperelastic strain enenrgy function and stress are now defined. We use the neo-Hookean function, but other strain energy functions can also be employed","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"function Ψ(C, C10, D1)\n    J = sqrt(det(C))\n    I1 = tr(C)\n    I1_bar = I1 * J^(-2 / 3)\n    return C10 * (I1_bar - 3) + (1 / D1) * (J - 1)^2\nend\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"The second Piola kirchhoff stress and its differentiation are then define ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"function constitutive_driver(C, C10, D1)\n    ∂²Ψ∂C², ∂Ψ∂C = Tensors.hessian(y -> Ψ(y, C10, D1), C, :all)\n    S = 2.0 * ∂Ψ∂C\n    ∂S∂C = 2.0 * ∂²Ψ∂C²\n    return S, ∂S∂C\nend\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Now, we define a driver for the strain energy in order to inlcude it in the input structure","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"function make_constitutive_driver(C10, D1)\n    return C -> constitutive_driver(C, C10, D1)\nend","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"We should tell the solve our problem is 2D or 3D. Also we should define we have applied traction or displacement. Then we should script ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"input.model_type = :plane_strain   # or :plane_strain; :plane_stress; :threeD\ninput.load_type = :traction\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Now we should assign parameters for the materials ans also call the fem function to include them in the input structure.","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"\ninput.E , input.ν = 3.35, 0.45\nE = input.E\nν = input.ν\nC10 = E / (4 * (1 + ν))\nD1 = 6.0 * (1.0 - 2.0 * ν) / E\ninput.material = make_constitutive_driver(C10, D1)\n\n\nLx, Ly = 3.17, 1.73  # Plate dimensions\nnx, ny = 10, 10   # Number of elements along x and y\ngrid = create_grid(Lx, Ly, nx, ny)  # Generate the grid\n\ninput.grid = grid\ninput.dh = create_dofhandler(grid)\ninput.ch = create_bc(input.dh )\n# Create CellValues and FacetValues\ninput.cell_values, input.facet_values = create_values()\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Apply the traction (it can be multiple tractions)","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"input.ΓN = getfacetset(grid, \"pressure\")\ninput.facetsets = [input.ΓN]\ninput.traction = [2.2, 0.0]\ninput.tractions = Dict(1 => input.traction)\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"If the aim is also plot force-displacement, we shoul also find the dof of reaction force and displacement (if not leave them empty)","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"\ndof_F_x = input.ch.prescribed_dofs[1:2:end]\ninput.dof_F = dof_F_x;\n\ndbc= create_bc_force(input.dh)\ndof_U_x = dbc.prescribed_dofs[1:2:end] \ninput.dof_U = dof_U_x\n# input.dof_F = []\n# input.dof_U = []\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Define the tolernce for solver and also parameters for time integration. Because the problem is nonlinear we need to solve it incrementally (time step here), then","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"input.tol = 1e-6\n\n## default\n#maxIterPerInc,totalTime,initInc,minInc,maxInc,totalInc = initialize_solver()\n\n# change like the following if you need\nmaxIterPerInc,totalTime,initInc,minInc,maxInc,totalInc = initialize_solver(500,1.0,1e-3,1e-15,0.8,1000)\n\n\ninput.maxIterPerInc = maxIterPerInc\ninput.totalTime = totalTime\ninput.initInc = initInc\ninput.minInc = minInc\ninput.maxInc = maxInc\ninput.totalInc = totalInc\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"The solver saves the displacement of the last time step in vtu file for analysis of the results. So solver needs a name and dir to save it ","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"input.filename = \"2D_Hyper\"\ninput.output_dir= \"/Users/aminalibakhshi/Desktop/vtu_geo/\"\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Howover, the solver saves the results for each time steps and returns all corresponding displacement vector and use can plot it using Plot.jl or GLMakie.jl","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Now, calling the solve","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"sol  = run_fem(input)\n","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"Solver is a structure that returns U = sol.U_steps[end] the displacement for each step and sol.F_effect the sum of reaction force and sol.U_effect average displacement in applied force (or displacement).","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"The force-displacement can be plotted using GLMakie.jl as","category":"page"},{"location":"tutorials/tutorial_fem/","page":"tutorial fem","title":"tutorial fem","text":"GLMakie.closeall()\nfig = Figure(size=(800, 600))\nax = Axis(fig[1, 1], xlabel=\"Displacement\", ylabel=\"Force\", title=\"force-displacement\", xgridvisible = false, ygridvisible = false)\n\n\n\nlines!((sol.U_effect), abs.(sol.F_effect), color = :black)\nscatter!((sol.U_effect), abs.(sol.F_effect), marker = :circle , color = :red)\ndisplay(fig)\n","category":"page"},{"location":"instruction/#This-is-the-instruction-to-use-the-package","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"","category":"section"},{"location":"instruction/#Guid-to-use-Finite-Element(fem)","page":"This is the instruction to use the package","title":"Guid to use Finite Element(fem)","text":"","category":"section"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"First we need to activate a dynamic structure to have all finite element parameters in it. We do it using ","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"input = InputStruct()\n\n````\nHere ```input``` is the a structure that will contains all fem parameters. \n\nNow using [Ferrite.jl](https://ferrite-fem.github.io/Ferrite.jl/stable/) we define geometry, mesh, fem parameters for interpolation and numerical integration and define degree-of-freedom. More details for this parts can be found in [Ferrite.jl](https://ferrite-fem.github.io/Ferrite.jl/stable/). \n\nAs an example, we do it for a two dimensional problem.\nOur element here is quad4 and then we define mesh and geometry as","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"\"\"\" Lx : Lenght in x-direction Ly : Lenght in y-direction Ferrite.Quadrilateral: Define the type of elements. nx : Number of element in x-dir  ny : Number of element in y-dir \"\"\" function creategrid(Lx, Ly, nx, ny)     corners = [         Ferrite.Vec{2}((0.0, 0.0)), Ferrite.Vec{2}((Lx, 0.0)),         Ferrite.Vec{2}((Lx, Ly)), Ferrite.Vec{2}((0.0, Ly))     ]     grid = Ferrite.generategrid(Ferrite.Quadrilateral, (nx, ny), corners)     addnodeset!(grid, \"support_1\", x -> x[1] ≈ 0.0)     addfacetset!(grid, \"pressure\", x -> x[1] ≈ Lx)     return grid end","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"It is noted that ","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"addnodeset!(grid, \"support_1\", x -> x[1] ≈ 0.0) addfacetset!(grid, \"pressure\", x -> x[1] ≈ Lx)","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"are used to define our boundary conditions.\n\nIf you wan to chose other element types like tri3 and so on please refer to [generate_grid](https://github.com/Ferrite-FEM/Ferrite.jl/blob/f1d1d0deef7bdaf019bd63ce9e8d959b6ebc8c4d/src/Grid/grid_generators.jl#L1-L7) .\n\nNext step is defining the fem values (interpolation and numerical integration)\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"function createvalues()     dim, order = 2, 1     ip = Ferrite.Lagrange{Ferrite.RefQuadrilateral,order}()^dim     qr = Ferrite.QuadratureRule{Ferrite.RefQuadrilateral}(2)     qrface = Ferrite.FacetQuadratureRule{Ferrite.RefQuadrilateral}(2)     return Ferrite.CellValues(qr, ip), Ferrite.FacetValues(qr_face, ip) end","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Very important to know is that the type here should be the same as the element type. For example here we have","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Ferrite.Quadrilateral and Ferrite.RefQuadrilateral ``` .","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Then defining the dof (here is 2D, ux,uy)","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"function create_dofhandler(grid)\n    dh = Ferrite.DofHandler(grid)\n    Ferrite.add!(dh, :u, Ferrite.Lagrange{Ferrite.RefQuadrilateral,1}()^2)\n    Ferrite.close!(dh)\n    return dh\nend\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Now, we define the Dirichlet boundary condition ","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"function create_bc(dh)\n    ch = Ferrite.ConstraintHandler(dh)\n    Ferrite.add!(ch, Ferrite.Dirichlet(:u, Ferrite.getnodeset(dh.grid, \"support_1\"), (x, t) -> [0.0, 0.0], [1, 2]))\n    Ferrite.close!(ch)\n    return ch\nend\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"If we want to plot force-displacement curve, we need to define another boundary condition to get dof of the displacment for the plot. Displacement where the force is applied. ","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"function create_bc_force(dh)\n    dbc = Ferrite.ConstraintHandler(dh)\n    Ferrite.add!(dbc, Ferrite.Dirichlet(:u, getfacetset(grid, \"pressure\"), (x, t) -> 0*x))\n    Ferrite.close!(dbc)\n    return dbc\nend\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"To now we defined the required functions for fem. These parts are from the package Ferrite.jl. More details can be seen in this package. ","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"The hyperelastic strain enenrgy function and stress are now defined. We use the neo-Hookean function, but other strain energy functions can also be employed","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"function Ψ(C, C10, D1)\n    J = sqrt(det(C))\n    I1 = tr(C)\n    I1_bar = I1 * J^(-2 / 3)\n    return C10 * (I1_bar - 3) + (1 / D1) * (J - 1)^2\nend\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"The second Piola kirchhoff stress and its differentiation are then define ","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"function constitutive_driver(C, C10, D1)\n    ∂²Ψ∂C², ∂Ψ∂C = Tensors.hessian(y -> Ψ(y, C10, D1), C, :all)\n    S = 2.0 * ∂Ψ∂C\n    ∂S∂C = 2.0 * ∂²Ψ∂C²\n    return S, ∂S∂C\nend\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Now, we define a driver for the strain energy in order to inlcude it in the input structure","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"function make_constitutive_driver(C10, D1)\n    return C -> constitutive_driver(C, C10, D1)\nend","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"We should tell the solve our problem is 2D or 3D. Also we should define we have applied traction or displacement. Then we should script ","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"input.model_type = :plane_strain   # or :plane_strain; :plane_stress; :threeD\ninput.load_type = :traction\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Now we should assign parameters for the materials ans also call the fem function to include them in the input structure.","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"\ninput.E , input.ν = 3.35, 0.45\nE = input.E\nν = input.ν\nC10 = E / (4 * (1 + ν))\nD1 = 6.0 * (1.0 - 2.0 * ν) / E\ninput.material = make_constitutive_driver(C10, D1)\n\n\nLx, Ly = 3.17, 1.73  # Plate dimensions\nnx, ny = 10, 10   # Number of elements along x and y\ngrid = create_grid(Lx, Ly, nx, ny)  # Generate the grid\n\ninput.grid = grid\ninput.dh = create_dofhandler(grid)\ninput.ch = create_bc(input.dh )\n# Create CellValues and FacetValues\ninput.cell_values, input.facet_values = create_values()\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Apply the traction (it can be multiple tractions)","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"input.ΓN = getfacetset(grid, \"pressure\")\ninput.facetsets = [input.ΓN]\ninput.traction = [2.2, 0.0]\ninput.tractions = Dict(1 => input.traction)\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"If the aim is also plot force-displacement, we shoul also find the dof of reaction force and displacement (if not leave them empty)","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"\ndof_F_x = input.ch.prescribed_dofs[1:2:end]\ninput.dof_F = dof_F_x;\n\ndbc= create_bc_force(input.dh)\ndof_U_x = dbc.prescribed_dofs[1:2:end] \ninput.dof_U = dof_U_x\n# input.dof_F = []\n# input.dof_U = []\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Define the tolernce for solver and also parameters for time integration. Because the problem is nonlinear we need to solve it incrementally (time step here), then","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"input.tol = 1e-6\n\n## default\n#maxIterPerInc,totalTime,initInc,minInc,maxInc,totalInc = initialize_solver()\n\n# change like the following if you need\nmaxIterPerInc,totalTime,initInc,minInc,maxInc,totalInc = initialize_solver(500,1.0,1e-3,1e-15,0.8,1000)\n\n\ninput.maxIterPerInc = maxIterPerInc\ninput.totalTime = totalTime\ninput.initInc = initInc\ninput.minInc = minInc\ninput.maxInc = maxInc\ninput.totalInc = totalInc\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"The solver saves the displacement of the last time step in vtu file for analysis of the results. So solver needs a name and dir to save it ","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"input.filename = \"2D_Hyper\"\ninput.output_dir= \"/Users/aminalibakhshi/Desktop/vtu_geo/\"\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Howover, the solver saves the results for each time steps and returns all corresponding displacement vector and use can plot it using Plot.jl or GLMakie.jl","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Now, calling the solve","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"sol  = run_fem(input)\n","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"Solver is a structure that returns U = sol.U_steps[end] the displacement for each step and sol.F_effect the sum of reaction force and sol.U_effect average displacement in applied force (or displacement).","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"The force-displacement can be plotted using GLMakie.jl as","category":"page"},{"location":"instruction/","page":"This is the instruction to use the package","title":"This is the instruction to use the package","text":"GLMakie.closeall()\nfig = Figure(size=(800, 600))\nax = Axis(fig[1, 1], xlabel=\"Displacement\", ylabel=\"Force\", title=\"force-displacement\", xgridvisible = false, ygridvisible = false)\n\n\n\nlines!((sol.U_effect), abs.(sol.F_effect), color = :black)\nscatter!((sol.U_effect), abs.(sol.F_effect), marker = :circle , color = :red)\ndisplay(fig)\n","category":"page"},{"location":"install/#Install","page":"Install","title":"Install","text":"","category":"section"},{"location":"install/#Installation","page":"Install","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"You can install the package using Julia’s package manager:","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"julia> ]\n\n(@v1.11) pkg> add https://github.com/Aminofa70/FerriteHyperelastic.jl","category":"page"},{"location":"tutorials/tutorial_curve_fitting/#This-tutorial-is-for-curve-fitting-of-hyperelastic-models","page":"tutorial curve fitting","title":"This tutorial is for curve fitting of hyperelastic models","text":"","category":"section"},{"location":"tutorials/tutorial_curve_fitting/#We-find-the-marterial-parameters-in-hyperelastic-models","page":"tutorial curve fitting","title":"We find the marterial parameters in hyperelastic models","text":"","category":"section"},{"location":"tutorials/tutorial_curve_fitting/","page":"tutorial curve fitting","title":"tutorial curve fitting","text":"For now the package supports neo-Hookean, Mooney-Rivlin, Ogden, and Yeoh models. ","category":"page"},{"location":"tutorials/tutorial_curve_fitting/","page":"tutorial curve fitting","title":"tutorial curve fitting","text":"The package also supports stability. Some experimental data are available in HyperData.jl repository.  ","category":"page"},{"location":"tutorials/tutorial_curve_fitting/","page":"tutorial curve fitting","title":"tutorial curve fitting","text":"The formulation for these models are found at Abaqus tutorials . ","category":"page"},{"location":"tutorials/tutorial_curve_fitting/","page":"tutorial curve fitting","title":"tutorial curve fitting","text":"The experimental data can be stain or stretch for x axis and the nominal stress for yaxis.","category":"page"},{"location":"tutorials/tutorial_curve_fitting/","page":"tutorial curve fitting","title":"tutorial curve fitting","text":"Assume that we have experimental data in a matrix named data.  Then we have the following code","category":"page"},{"location":"tutorials/tutorial_curve_fitting/","page":"tutorial curve fitting","title":"tutorial curve fitting","text":"inputDataType = \"strain\"\ndata_type     = \"biaxial\"\nmodelType     = \"ogden\"\nSexp = data[:, 1]\n\nif inputDataType == \"lambda\"\n    strainExp = data[:, 2] .- 1\nelseif inputDataType == \"strain\"\n    strainExp = data[:, 2]\nelse\n    error(\"Unknown inputDataType: $inputDataType\")\nend\n\nmat_cons_solver = solver_constants_hyper(data_type, modelType,strainExp, Sexp)\n","category":"page"},{"location":"tutorials/tutorial_curve_fitting/","page":"tutorial curve fitting","title":"tutorial curve fitting","text":"inputDataType can be \"lambda\" or \"strain\".","category":"page"},{"location":"tutorials/tutorial_curve_fitting/","page":"tutorial curve fitting","title":"tutorial curve fitting","text":"Also data_type can be biaixla, uniaxial, and pure shear.","category":"page"},{"location":"tutorials/tutorial_curve_fitting/","page":"tutorial curve fitting","title":"tutorial curve fitting","text":"modelType can be ogden, neo-hookean, yeoh, and mooney-rivlin. It is noted that we use lowercase letter for all.","category":"page"},{"location":"#FerriteHyperelastic","page":"Home","title":"FerriteHyperelastic","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to Documentation for FerriteHyperelastic.","category":"page"}]
}
